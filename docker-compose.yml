services:
  frontend:
    build: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - /app/__pycache__
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/mydb
      - SECRET_KEY=3B65D4484D6D91C2D7E2E84CD93D2
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=60*24
    networks:
      - my-network

  backend-test:
    build: ./backend
    volumes:
      - ./backend:/app
    command: bash -c "pytest --asyncio-mode=auto"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/test_db
      - SECRET_KEY=TEST_SECRET
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my-network

  db:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: mydb
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-network

volumes:
  pgdata:

networks:
  my-network:
    driver: bridge
